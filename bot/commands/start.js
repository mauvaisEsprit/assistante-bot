const startHandler = require('../handlers/startHandler');
const addChildHandler = require('../handlers/addChildHandler');
const editPriceHandler = require('../handlers/editPriceHandler');
const Child = require('../models/Child');
const getSettingsKeyboard = require('../keyboards/settingsKeyboard');

module.exports = (bot) => {
  bot.start(async (ctx) => {
    await startHandler(ctx);
  });

  bot.action('add_child', async (ctx) => {
    await addChildHandler.startAddChild(ctx);
  });

  bot.on('text', async (ctx) => {
  const userId = ctx.from.id;

  if (addChildHandler.isAdding(userId)) {
    await addChildHandler.processInputStart(ctx);
  } else if (editPriceHandler.isEditing(userId)) {
    await editPriceHandler.processInput(ctx);
  } else {
    // –î—Ä—É–≥–∏–µ —Å–ª—É—á–∞–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }
});



  bot.action('cancel_add_child', async (ctx) => {
    await addChildHandler.cancelAddChild(ctx);
  });

  bot.action('open_settings', async (ctx) => {
    const settingsKeyboard = require('../keyboards/settingsKeyboard')();
    await ctx.reply('‚öôÔ∏è Param√®tres :', { reply_markup: settingsKeyboard });
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–±—ë–Ω–∫–∞ ‚Äî —Å–ø–∏—Å–æ–∫
  bot.action('delete_child', async (ctx) => {
    const children = await Child.find().lean();

    if (children.length === 0) {
      return ctx.answerCbQuery('Aucun enfant √† supprimer', { show_alert: true });
    }

    const buttons = children.map(child => ([{
      text: child.name,
      callback_data: `delete_child_select_${child._id}`
    }]));

    buttons.push([{ text: 'üîô Retour', callback_data: 'open_settings' }]);

    await ctx.reply('S√©lectionnez un enfant √† supprimer :', {
      reply_markup: { inline_keyboard: buttons }
    });
  });

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
  bot.action(/^delete_child_select_(.+)$/, async (ctx) => {
    const childId = ctx.match[1];

    const child = await Child.findById(childId).lean();
    if (!child) {
      return ctx.answerCbQuery("Enfant introuvable", { show_alert: true });
    }

    await ctx.reply(
      `Voulez-vous vraiment supprimer l'enfant "${child.name}" ? Cette action est irr√©versible.`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚úÖ Oui, supprimer', callback_data: `delete_child_confirm_${childId}` },
              { text: '‚ùå Annuler', callback_data: 'delete_child' }
            ]
          ]
        }
      }
    );
  });

  // –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
  bot.action(/^delete_child_confirm_(.+)$/, async (ctx) => {
    const childId = ctx.match[1];

    try {
      await Child.findByIdAndDelete(childId);
      await ctx.answerCbQuery("Enfant supprim√©");

      await ctx.reply('Enfant supprim√©. Menu des param√®tres :', {
        reply_markup: getSettingsKeyboard()
      });

    } catch (e) {
      console.error(e);
      await ctx.answerCbQuery("Erreur lors de la suppression de l'enfant", { show_alert: true });
    }
  });
};
