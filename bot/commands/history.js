const Visit = require("../models/Visit");
const historyHandler = require("../handlers/historyHandler");
const sessionAuthMiddleware = require("../middleware/sessionAuthMiddleware");



module.exports = (bot) => {
  // √âtape 1 ‚Äî liste des mois
  bot.action(/^history_months_(\w{24})$/, sessionAuthMiddleware, async (ctx) => {
    await ctx.answerCbQuery();
    await historyHandler.showMonths(ctx);
  });

  // √âtape 2 ‚Äî liste des dates dans le mois
  bot.action(
    /^history_dates_(\w{24})_(\d{4}-\d{2})$/, sessionAuthMiddleware, async (ctx) => {
      await ctx.answerCbQuery();
      await historyHandler.showDates(ctx);
  });

  // √âtape 3 ‚Äî visites du jour
  bot.action(
    /^history_day_(\w{24})_(\d{4}-\d{2}-\d{2})$/, sessionAuthMiddleware,async (ctx) => {
      await ctx.answerCbQuery();
      await historyHandler.showVisitsForDate(ctx);
  });

  // Suppression ‚Äî confirmation
  bot.action(/^delv_(.+)$/, sessionAuthMiddleware, async (ctx) => {
    await ctx.answerCbQuery();
    const visitId = ctx.match[1];
    const visit = await Visit.findById(visitId);

    if (!visit) {
      return ctx.answerCbQuery("Enregistrement non trouv√©", { show_alert: true });
    }

    await ctx.answerCbQuery();

  await ctx.reply(
  `‚ùó Supprimer cet enregistrement ?\nüìÖ ${visit.date}\nüïí ${visit.startTime} - ${visit.endTime ? visit.endTime : 'en cours'}`
  ,


      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: "‚úÖ Oui", callback_data: `confirm_delv_${visitId}` },
              { text: "‚ùå Non", callback_data: `history_day_${visit.childId}_${visit.date}` }
            ]
          ]
        }
      }
    );
  });

  // Suppression ‚Äî ex√©cution
  bot.action(/^confirm_delv_(.+)$/, sessionAuthMiddleware,  async (ctx) => {
  await ctx.answerCbQuery();
  const visitId = ctx.match[1];
  const visit = await Visit.findById(visitId);

  if (!visit) {
    return ctx.answerCbQuery("Enregistrement d√©j√† supprim√©", { show_alert: true });
  }

  const { childId, date } = visit;
  const yearMonth = date.slice(0, 7);

  // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
  await Visit.deleteOne({ _id: visitId });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –≤–∏–∑–∏—Ç—ã –≤ –º–µ—Å—è—Ü–µ
  const remainingVisits = await Visit.find({
    childId,
    date: { $regex: `^${yearMonth}` }
  }).lean();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –≤–æ–æ–±—â–µ –≤–∏–∑–∏—Ç—ã —É —Ä–µ–±—ë–Ω–∫–∞
  const totalVisits = await Visit.find({ childId }).lean();

  await ctx.answerCbQuery("‚úÖ Enregistrement supprim√©");

  await new Promise(resolve => setTimeout(resolve, 1000)); // –Ω–µ–±–æ–ª—å—à–æ–π —Ç–∞–π–º–∞—É—Ç

  if (remainingVisits.length > 0) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∏–∑–∏—Ç—ã –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—ã
    ctx.callbackQuery.data = `history_dates_${childId}_${yearMonth}`;
    await historyHandler.showDates(ctx);
  } else if (totalVisits.length > 0) {
    // –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –≤–∏–∑–∏—Ç–æ–≤ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—è—Ü–∞—Ö ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Å—è—Ü—ã
    ctx.callbackQuery.data = `history_months_${childId}`;
    await historyHandler.showMonths(ctx);
  }  else {
  ctx.callbackQuery.data = `child_menu_${childId}`;
  const childSelectHandler = require('../handlers/childSelectHandler');
  await childSelectHandler(ctx);

  }
});


};
