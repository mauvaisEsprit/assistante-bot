const Child = require('../models/Child');
require('dotenv').config();
const startHandler = require('../handlers/startHandler');
const { Markup } = require('telegraf');
const authorizedUsers = require('../utils/authStore');
const addChildHandler = require('../handlers/addChildHandler');
const editPriceHandler = require('../handlers/editPriceHandler');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π userId -> [{chatId, messageId}]
const userMessages = new Map();

async function saveMessage(ctx, sentMessage) {
  const userId = ctx.from.id;
  if (!userMessages.has(userId)) {
    userMessages.set(userId, []);
  }
  userMessages.get(userId).push({ chatId: sentMessage.chat.id, messageId: sentMessage.message_id });
}

module.exports = (bot) => {
  bot.start(async (ctx) => {
    if (authorizedUsers.has(ctx.from.id)) {
      const auth = authorizedUsers.get(ctx.from.id);
      if (auth.role === 'admin') {
        const msg1 = await ctx.reply('üëã Vous √™tes connect√© en tant qu\'administrateur. Acc√®s √† tous les enfants.');
        await saveMessage(ctx, msg1);
        await startHandler(ctx);
        return;
      } else {
        const child = await Child.findById(auth.childId).lean();
        if (!child) {
          const msg = await ctx.reply('‚ùå Enfant introuvable.');
          await saveMessage(ctx, msg);
          return;
        }

        const msg = await ctx.reply(`üë∂ Informations sur l'enfant : ${child.name}`);
        await saveMessage(ctx, msg);
        return;
      }
    }
    const msg = await ctx.reply('üîê Veuillez entrer le code PIN pour acc√©der :');
    await saveMessage(ctx, msg);
  });

  bot.on('text', async (ctx) => {
    const userId = ctx.from.id;

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –∂–¥–µ–º PIN
    if (!authorizedUsers.has(userId)) {
      const pin = ctx.message.text.trim();

      if (pin === process.env.ADMIN_PIN) {
        authorizedUsers.set(userId, { role: 'admin' });
        await ctx.reply('‚úÖ Vous √™tes connect√© en tant qu\'administrateur. Acc√®s √† tous les enfants.');
        await startHandler(ctx);
        return;
      }

      const child = await Child.findOne({ pinCode: pin }).lean();
      if (!child) {
        return ctx.reply('‚ùå PIN incorrect. Veuillez r√©essayer :');
      }

      authorizedUsers.set(userId, { role: 'child', childId: child._id });
      await ctx.reply(
        `‚úÖ Connexion r√©ussie ! Informations sur l'enfant :\n\n` +
        `üë∂ Nom : ${child.name}\n` +
        `üí∂ Tarif horaire : ‚Ç¨${child.hourlyRate}\n` +
        `üçΩÔ∏è Prix du repas : ‚Ç¨${child.mealRate}\n` +
        `üßº Prix des services : ‚Ç¨${child.serviceRate}`,
        Markup.inlineKeyboard([
          [Markup.button.callback('üìÖ Historique des visites', `history_months_${child._id}`)],
          [Markup.button.callback('üîô Se d√©connecter', 'logout')],
        ])
      );
      return;
    }

    // –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî —Å–º–æ—Ç—Ä–∏–º, –≤ –∫–∞–∫–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
    if (addChildHandler.isAdding(userId)) {
      await addChildHandler.processInputStart(ctx);
    } else if (editPriceHandler.isEditing(userId)) {
      await editPriceHandler.processInput(ctx);
    } else {
      // –î—Ä—É–≥–∏–µ —Å–ª—É—á–∞–∏: –ª–∏–±–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å, –ª–∏–±–æ –≤—ã–≤–æ–¥–∏—Ç—å –º–µ–Ω—é, –ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
      // –ù–∞–ø—Ä–∏–º–µ—Ä:
      await ctx.reply('‚ùì Commande ou action inconnue. Utilisez le menu.');
    }
  });

  bot.action('logout', async (ctx) => {
    authorizedUsers.delete(ctx.from.id);

    const msgs = userMessages.get(ctx.from.id) || [];
    for (const { chatId, messageId } of msgs) {
      try {
        await ctx.telegram.deleteMessage(chatId, messageId);
      } catch (e) {
        // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      }
    }
    userMessages.delete(ctx.from.id);

    await ctx.answerCbQuery('Vous √™tes d√©connect√©');

    // –ö—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–í–æ–π—Ç–∏ —Å–Ω–æ–≤–∞"
    const text = `üëã Vous vous √™tes d√©connect√© avec succ√®s.\n\n` +
                 `Pour vous reconnecter, cliquez sur le bouton ci-dessous et saisissez votre code PIN.`;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîê Se reconnecter', 'start_login')]
    ]);

    const msg = await ctx.reply(text, keyboard);
    await saveMessage(ctx, msg);
  });
};
