const Child = require('../models/Child');
const { Markup } = require('telegraf');


const addChildSessions = new Map();

module.exports = {
  isAdding(userId) {
    return addChildSessions.has(userId);
  },

  async startAddChild(ctx) {
    addChildSessions.set(ctx.from.id, { step: 'awaiting_name' });
    await ctx.reply(
      'üìù Entrez le nom du nouvel enfant :',
      Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå Annuler', 'cancel_add_child')]
      ])
    );
  },

  async processInputStart(ctx) {
    if (!ctx.message || !ctx.message.text) return;

    const session = addChildSessions.get(ctx.from.id);
    if (!session) return;

    if (session.step === 'awaiting_name') {
      const name = ctx.message.text.trim();
      if (!name) {
        return ctx.reply('‚ö†Ô∏è Le nom ne peut pas √™tre vide. Veuillez r√©essayer :');
      }
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –º–µ–Ω—è–µ–º —à–∞–≥ –Ω–∞ –≤–≤–æ–¥ PIN
      session.name = name;
      session.step = 'awaiting_pin';
      addChildSessions.set(ctx.from.id, session);

      return ctx.reply(
        'üîë Maintenant, veuillez entrer un code PIN (4 √† 6 chiffres) :',
        Markup.inlineKeyboard([
          [Markup.button.callback('‚ùå Annuler', 'cancel_add_child')]
        ])
      );
    }

    if (session.step === 'awaiting_pin') {
      const pin = ctx.message.text.trim();

      if (!/^\d{4,6}$/.test(pin)) {
        return ctx.reply('‚ö†Ô∏è Le PIN doit contenir entre 4 et 6 chiffres. Veuillez r√©essayer :');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–π PIN –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
      const existingChild = await Child.findOne({ pinCode: pin }).lean();
      if (existingChild) {
        return ctx.reply('‚ö†Ô∏è Ce code PIN est d√©j√† utilis√©. Veuillez en choisir un autre :');
      }

      // –°–æ–∑–¥–∞—ë–º —Ä–µ–±—ë–Ω–∫–∞ —Å –∏–º–µ–Ω–µ–º –∏ PIN
      const child = new Child({
        name: session.name,
        pinCode: pin,
        hourlyRate: 0,
        mealRate: 0,
        serviceRate: 0,
        overtimeThreshold: 45,
        overtimeMultiplier: 1.25,
      });

      await child.save();

      addChildSessions.delete(ctx.from.id);

      await ctx.reply(`‚úÖ L'enfant "${session.name}" a √©t√© ajout√© avec succ√®s avec le PIN !`);
      await ctx.reply(
        'Vous pouvez modifier les informations de l‚Äôenfant :',
        Markup.inlineKeyboard([
          [Markup.button.callback('‚úèÔ∏è Modifier', `edit_prices_${child._id}`)],
          [Markup.button.callback('üîô Retour', 'open_settings')]
        ])
      );
    }
  },

  async cancelAddChild(ctx) {
    addChildSessions.delete(ctx.from.id);
    await ctx.reply('‚ùå Ajout de l‚Äôenfant annul√©.');
    await ctx.reply(
      'Vous pouvez revenir au menu des param√®tres.',
      Markup.inlineKeyboard([
        [Markup.button.callback('üîô Retour', 'open_settings')]
      ])
    );
  }
};
